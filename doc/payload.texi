@node Writing a Payload
@chapter Writing a Payload

@node Lifecycle of an Implant
@section Lifecycle of an Implant

@noindent
Setup:

@enumerate

@item An implanted save file is loaded by the game.
@item A level transition occurs.
@item The player gains control.
@item The exploit runs.
@item The payload is loaded and linked.
@item The module load functions are called.

@end enumerate

@noindent
Repeat:

@enumerate 7

@item The module update functions are called on every iteration of the main
loop.
@item The main loop in @code{startlevel} stops.
@item The module unload functions are called.
@item A level transition occurs.
@item The @code{ParseBin} function loads the new level overlay.
@item If the level transition was the result of a save game being loaded, or the
player choosing to quit to the title screen, no further steps are executed.
@item The payload is reloaded and linked against the new level.
@item The module load functions are called.
@item The player gains control.
@item Goto @b{Repeat}.

@end enumerate

@node Modules
@section Modules

A payload consists of a number of modules which, as described above, are loaded
when the exploit first runs and immediately upon level load. You can designate
a function to be executed at this time by using the @code{MODULE_LOAD_FUNC}
macro, passing the name of the function as an argument.

Similarly, modules can have update functions that are run on every iteration of
the game's main loop. You can designate a function to be executed at this time
by using the @code{MODULE_UPDATE_FUNC} macro.

Finally, modules can have unload functions, which run when the game's main
loop returns. You can designate a function to be executed at this time using the
@code{MODULE_UNLOAD_FUNC} macro.

@node Hooking
@section Hooking

Racdoor supports three types of hook: functions entry point hooks, automatic
function entry point hooks, and function call hooks.

Function entry point hooks work by replacing the first two instructions in the
original function with a jump to a replacement function followed by a no-op in
the delay slot.

They can be installed using the @code{install_hook} function. Every hook
installed in this way must be uninstalled using the @code{uninstall_hook}
function, for example in a module unload function.

It is possible to call the original function from its replacement using the
provided trampoline functionality. It is necessary to create the trampoline even
if it is never called since it is used to store the data that is needed to
uninstall the hook later.

Automatic function entry point hooks work in the same way, except that you do
not need to call @code{install_hook} or @code{uninstall_hook} yourself. Instead,
you define the hook using the @code{AUTO_HOOK} macro and it will automatically
be installed and uninstalled by @code{hook.c}'s module load and unload
functions. Note that this approach saves memory since fewer MIPS instructions
will be generated.

Finally, function call hooks modify function calls to point to a different
function, can be installed using the @code{install_call_hook} function and can
be uninstalled using the @code{uninstall_call_hook} function. They leave the
original function being called intact (unless the call instruction being
modified is the function calling itself) so it can be called normally.
